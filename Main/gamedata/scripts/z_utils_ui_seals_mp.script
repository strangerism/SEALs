
-- moves the upgrade indicator to the top rigth
local og_Add_Upgrade = utils_ui.UICellItem.Add_Upgrade
function utils_ui.UICellItem:Add_Upgrade(xml, obj, sec)

    og_Add_Upgrade(self, xml, obj, sec)

	-- Hide upgrade indicator
	if self.upgr then
		-- printf("* hide upgrd indicator %s", sec)
		self.upgr:Show(false)
	end
	
	-- On full stacking, hide upgrade indicator
	if self.container.stack_all and (self.childs and is_not_empty(self.childs)) then
		-- printf("* hide upgrd - staking %s", sec)
		return
	end
	
	-- Bar is applied only to upgraded items
	if (not utils_item.has_upgrades(obj, sec)) then
		-- printf("* hide upgrd - has not upgrade %s", sec)
		return
	end
	
	-- Init if it doesn't exist
	if (not self.upgr) then
		if (not xml) then 
			xml = self:GetXML()
		end
		self.upgr = xml:InitStatic(self.path .. ":cell:upgrade", self.ico)
	end

	local ico = self.ico
	local xx = self.upgr:GetWndPos().x
	local yy = self.upgr:GetWndPos().y

	local rot = ico:GetHeading() > 0

	if rot then
		
		local x_offset = -4 * 1024/device().width + (self.cell:GetWidth() - self.upgr:GetWidth()) --[px]
		local y_offset = 4 * 768/device().height --[px]
		xx = x_offset - (self.cell:GetWidth() - ico:GetWidth())/2
		yy = y_offset - (self.cell:GetHeight() - ico:GetHeight())/2

		self.upgr:SetWndPos(vector2():set( xx , yy ))
	else

        self.upgr:SetWndPos(vector2():set( xx + self.ico:GetWidth() - 25 * 1024/device().width , yy ))
        -- else
        --     self.upgr:SetWndPos(vector2():set( xx + self.cell:GetWidth() - 25 * 1024/device().width , yy ))
        -- end
	end

	self.upgr:Show(true)
	
	self:Print(nil, "Show upgrade indicator")
	
end

local show_tooltip
local limit_tooltip
local amount_tooltip
local scale_tooltip
-- draws the seal badges on the tooltip dialog
local XMLP = CScriptXmlInit()
XMLP:ParseFile("utils.xml")
local og_UIInfoItem_Update = utils_ui.UIInfoItem.Update
function utils_ui.UIInfoItem:Update(obj, sec, flags)
	og_UIInfoItem_Update(self, obj, sec, flags)
	-- printf("! Update now")
	-- destroy icons first
    if self.seals then
		-- printf("* -- destroy icons first")
		for i = 1, #self.seals do
			-- printf("-- Creating Seal id %s name %s", i, self.seals[i].cap:GetText())
			self.seals[i].icon:Show(false)
			self.seals[i].icon = nil
			self.seals[i].cap:Show(false)
			self.seals[i].cap = nil
			self.seals[i].base:Show(false)
			self.seals[i].base = nil
		end
	end
	---
	if not show_tooltip then return end

	self.seals = {}

	local seals = seals_mcm.get_seals(sec)
	-- printf("* -- create new icons")
	local margin = 0
	local y_offset = 0
	for i = 1, #seals do
		if limit_tooltip and i > amount_tooltip then break end
		-- printf("-- Creating Seal id %s name %s", i, seals[i].name)
		self.seals[i]        = {}
		self.seals[i].base = XMLP:InitStatic("item_info:seal", self.dialog)
		self.seals[i].icon  = XMLP:InitStatic("item_info:seal:icon", self.seals[i].base)
		self.seals[i].icon:InitTexture(seals[i].texture)
		
		self.seals[i].cap    = XMLP:InitTextWnd("item_info:seal:cap", self.seals[i].base)
		self.seals[i].cap:SetText(strformat("%s", game.translate_string(seals[i].caption)))
		self.seals[i].cap:SetWndPos(vector2():set(self.seals[i].cap:GetWndPos().x, self.seals[i].cap:GetWndPos().y + 30 * scale_tooltip))
		if (i == 4) then
			-- reset x margin
			margin = 0
			-- add y_offset 
			y_offset = (self.seals[i].icon:GetHeight() + self.seals[i].cap:GetHeight()) + 25 * 768/device().height 
		end
		local xx = (self.dialog:GetWidth() - self.seals[i].icon:GetWidth() - margin ) - 100 * 1024/device().width
		local yy = self.seals[i].base:GetWndPos().y - 20 * 768/device().height + y_offset * scale_tooltip
		self.seals[i].base:SetWndPos(vector2():set(xx , yy))
		self.seals[i].icon:SetWndSize(vector2():set( self.seals[i].icon:GetWidth() * scale_tooltip , self.seals[i].icon:GetHeight() * scale_tooltip ))
		self.seals[i].icon:Show(true)
		self.seals[i].icon:IsAutoDelete(true)
		margin = margin + self.seals[i].base:GetWidth() * scale_tooltip + 35 * 1024/device().width
	end
	
end

function on_option_change()
	show_tooltip = seals_mcm.get_config(seals_mcm.main_settings_path, "show_tooltip", true)
	limit_tooltip = seals_mcm.get_config(seals_mcm.main_settings_path, "limit_tooltip", true)
	amount_tooltip = seals_mcm.get_config(seals_mcm.main_settings_path, "amount_tooltip", 6)
	scale_tooltip = seals_mcm.get_config(seals_mcm.main_settings_path, "scale_tooltip", 1)
end

function on_game_start()
    RegisterScriptCallback("on_option_change",on_option_change)
	on_option_change()
end