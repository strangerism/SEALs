
local E_PRESS   = ui_events.WINDOW_KEY_PRESSED
local E_RELEASE = ui_events.WINDOW_KEY_RELEASED

local og_OnKeyboard = ui_inventory.UIInventory.OnKeyboard
function ui_inventory.UIInventory:OnKeyboard(dik, keyboard_action)
	
	local res = CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (res == false) then
		local KEY = seals_mcm.get_toggle_key()
		if keyboard_action == E_RELEASE then
			if dik == KEY then
				-- printf("-- DIK %s E_RELEASE", dik)
				seals_mcm.on_key_release(dik)
			end
			
		elseif keyboard_action == E_PRESS then
			
			if dik == KEY then
				-- printf("-- DIK %s E_PRESS", dik)
				seals_mcm.on_key_press(dik)
			end
		end
	end

	og_OnKeyboard(self, dik, keyboard_action)
end

-- moves the upgrade indicator to the top rigth
local og_Add_Upgrade = utils_ui.UICellItem.Add_Upgrade
function utils_ui.UICellItem:Add_Upgrade(xml, obj, sec)

    og_Add_Upgrade(self, xml, obj, sec)

	-- Hide upgrade indicator
	if self.upgr then
		-- printf("* hide upgrd indicator %s", sec)
		self.upgr:Show(false)
	end
	
	-- On full stacking, hide upgrade indicator
	if self.container.stack_all and (self.childs and is_not_empty(self.childs)) then
		-- printf("* hide upgrd - staking %s", sec)
		return
	end
	
	-- Bar is applied only to upgraded items
	if (not utils_item.has_upgrades(obj, sec)) then
		-- printf("* hide upgrd - has not upgrade %s", sec)
		return
	end
	
	-- Init if it doesn't exist
	if (not self.upgr) then
		if (not xml) then 
			xml = self:GetXML()
		end
		self.upgr = xml:InitStatic(self.path .. ":cell:upgrade", self.ico)
	end

	local ico = self.ico
	local xx = self.upgr:GetWndPos().x
	local yy = self.upgr:GetWndPos().y

	local rot = ico:GetHeading() > 0

	if rot then
		
		local x_offset = -4 * 1024/device().width + (self.cell:GetWidth() - self.upgr:GetWidth()) --[px]
		local y_offset = 4 * 768/device().height --[px]
		xx = x_offset - (self.cell:GetWidth() - ico:GetWidth())/2
		yy = y_offset - (self.cell:GetHeight() - ico:GetHeight())/2

		self.upgr:SetWndPos(vector2():set( xx , yy ))
	else

        self.upgr:SetWndPos(vector2():set( xx + self.ico:GetWidth() - 25 * 1024/device().width , yy ))
        -- else
        --     self.upgr:SetWndPos(vector2():set( xx + self.cell:GetWidth() - 25 * 1024/device().width , yy ))
        -- end
	end

	self.upgr:Show(true)
	
	self:Print(nil, "Show upgrade indicator")
	
end

local show_tooltip
local show_caption
local limit_tooltip
local amount_tooltip
local icon_tooltip_scale
local offset_x
local offset_y
local spacing_x
local spacing_y
local columns_count
local c_gold = GetARGB(255, 255, 223, 0)
-- draws the seal badges on the tooltip dialog
local XMLP = CScriptXmlInit()
XMLP:ParseFile("utils.xml")
local og_UIInfoItem_Update = utils_ui.UIInfoItem.Update
function utils_ui.UIInfoItem:Update(obj, sec, flags)
	og_UIInfoItem_Update(self, obj, sec, flags)
	-- printf("! Update now")
	-- destroy icons first
    if self.seals then
		-- printf("* -- destroy icons first")
		for i = 1, #self.seals do
			-- printf("-- Creating Seal id %s name %s", i, self.seals[i].cap:GetText())
			if self.seals[i].icon then
				self.seals[i].icon:Show(false)
				self.seals[i].icon = nil				
			end
			if self.seals[i].cap then 
				self.seals[i].cap:Show(false)
				self.seals[i].cap = nil
			end
			if self.seals[i].base then
				self.seals[i].base:Show(false)
				self.seals[i].base = nil
			end
		end
	end
	---
	if not show_tooltip then return end

	self.seals = {}

	local seals = seals_mcm.get_seals(sec)
	-- printf("* -- create new icons")
	local rows_offset_x = 0
	local rows_offset_y = 0
	local col = 0
	local row = 0
	for i = 1, #seals do
		-- printf("-- iteration[i] %s - max column %s",i, columns_count)
		if limit_tooltip and i > amount_tooltip then break end
		-- printf("-- Creating Seal id %s name %s", i, seals[i].name)
		self.seals[i]        = {}
		self.seals[i].base = XMLP:InitStatic("item_info:seal", self.dialog)
		
		self.seals[i].icon  = XMLP:InitStatic("item_info:seal:icon", self.seals[i].base)
		self.seals[i].icon:InitTexture(seals[i].texture)
		self.seals[i].icon:SetWndSize(vector2():set( self.seals[i].icon:GetWidth() * icon_tooltip_scale , self.seals[i].icon:GetHeight() * icon_tooltip_scale ))
		
		self.seals[i].cap    = XMLP:InitTextWnd("item_info:seal:cap", self.seals[i].base)
		self.seals[i].cap:SetText(strformat("%s", game.translate_string(seals[i].caption)))
		self.seals[i].cap:SetWndPos(vector2():set(self.seals[i].cap:GetWndPos().x, self.seals[i].cap:GetWndPos().y + 30 * icon_tooltip_scale))
		if not show_caption then
			self.seals[i].cap:Show(false)
		end
		if seals[i].primary then
			self.seals[i].cap:SetTextColor(c_gold)
		end
		local cap_h = self.seals[i].cap:GetHeight()
		local cap_w = self.seals[i].cap:GetWidth()
		local icon_w = self.seals[i].icon:GetWidth()
		local icon_h = self.seals[i].icon:GetHeight()
		local rows_base_offset_x = (icon_w + icon_w/2)
		local rows_base_offset_y =  (icon_h + icon_h/2) + cap_h
		if i == 1 or math.fmod(i-1,columns_count) == 0 then
			-- printf("! reset row")
			-- reset the row
			row = row + 1
			col = 1
		end
		-- printf("col %s, row %s", col, row)
		-- x offset at first col is 0
		rows_offset_x = rows_base_offset_x * col - rows_base_offset_x
		-- y offset at first row is 0
		rows_offset_y = rows_base_offset_y * row - rows_base_offset_y

		-- printf("rows_offset_x %s, rows_offset_y %s", rows_offset_x, rows_offset_y)

		local anchor_x = self.dialog:GetWidth() - (icon_w + icon_w/2) - offset_x * icon_tooltip_scale
		local xx = anchor_x - rows_offset_x - spacing_x * (col - 1) * icon_tooltip_scale
		
		local anchor_y = self.seals[i].base:GetWndPos().y + icon_h/2 + offset_y * icon_tooltip_scale
		local yy = anchor_y + rows_offset_y + spacing_y * (row - 1) * icon_tooltip_scale
	
		self.seals[i].base:SetWndPos(vector2():set(xx , yy ))
		
		-- printf(" x=%s, y=%s", xx, yy)
		-- increase the column index
		col = col + 1
	end
	
end

function on_option_change()
	show_tooltip = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "show_tooltip", true)
	show_caption = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "show_caption", true)
	limit_tooltip = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "limit_tooltip", true)
	amount_tooltip = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "amount_tooltip", 6)
	icon_tooltip_scale = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "scale_tooltip", 1)
	offset_x = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "offset_x", 20)
	offset_y = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "offset_y", 20)
	spacing_x = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "spacing_x", 35)
	spacing_y = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "spacing_y", 25)
	columns_count = seals_mcm.get_config(seals_mcm.tooltips_settings_path, "columns_count", 3)
end

function on_game_start()
    RegisterScriptCallback("on_option_change",on_option_change)
	on_option_change()
end